First of all, after installing docker on your machine & add "Dockerfile"
Initially, the container is empty.

You have to set the baseImage, in our case it's (Node)
    FROM node:18        # by default it's set to the latest version 
         
COPY src dist
# NOTE: To set a the working directory for any future (RUN, CMD, COPY, ADD, ...) we use ==>  "WORKDIR"
    WORKDIR /app        # this folder will be in the root of the container.

After adding node image, we want to install all dependencies for our application
    COPY package.json .

# NOTE: To run a command:    "RUN"
    RUN npm install       # NOTE: after installing node, our server can use (npm)

To copy all files like "index.js" from the working directory to the server
    COPY . . 


You can setup the port to use the container server on with (EXPOSE)
    EXPOSE 4000
Now, you're able to run this server using (npm start) or whatever.
    CMD [ "npm", "start" ]



    =======================================================================================
    =======================================================================================


Since we finished (Dockerfile), we can run it from terminal with this command:
    $ docker build -t first-node-app .
"first-node-app"        ==>     gives the built image a name.
"."                     ==>     the path to run "Dockerfile" from (by default it searches for (Dockerfile)) 
// You can also say    "./Dockerfile"

// Now, your image is successfully created. 
// To see all images in docker:
    $ docker image ls 


    =======================================================================================
    =======================================================================================


Once we created the image, we can run it to create a container.
    $ docker run --name express-node-app-container express-node-app         # To run image and give the container a name (express-node-app-container) 

To show all running containers: 
    $ docker ps


To remove a container:
    $ docker rm <container-name> 


To run the container in "Background" and be able to use other commands we add a flag -d before the image-name like this:
    $ docker run --name second-node-app-container -d first-node-app

If we try to remove a container but it's running. We have to force it with (-f) force flag..


NOTE: the (EXPOSE) we used above is just for documentation. 
But to make the server listen on some port we do it like this:
    $ docker run --name first-node-app-container -d -p 1000:4000 first-node-app
// This means forward the port 1000 of my machine to port 4000 in the container that I've previously set in (EXPOSE)